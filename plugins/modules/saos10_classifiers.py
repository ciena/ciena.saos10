#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2021 Ciena
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################

"""
The module file for saos10_classifiers
"""

from __future__ import absolute_import, division, print_function

__metaclass__ = type

ANSIBLE_METADATA = {"metadata_version": "1.1", "status": ["preview"], "supported_by": "network"}

DOCUMENTATION = """
---
module: saos10_classifiers
version_added: "1.0.0"
short_description: Manage classifiers on Ciena SAOS 10 devices
description: This module provides declarative management of a classifier
author: Jeff Groom (@jgroom33)
requirements:
  - ncclient (>=v0.6.4)
  - xmltodict (>=0.12.0)
options:
  config:
    description: List of classifier templates. Classifiers can be referenced by various
      entities (flow-point/access-flow/qos-flow etc.) to define their incoming classification.
    type: list
    elements: dict
    suboptions:
      name:
        description: A unique name for the classifier.
        type: str
        required: false
      filter_operation:
        description: Choose the scope of application of the rule
        type: str
        choices:
          - match-all
          - match-any
        required: false
      filter_entry:
        description: Add one filtering rule for this classifier.
        type: list
        elements: dict
        suboptions:
          filter_parameter:
            description: Indicates which filter parameter is used by this filter entry
            type: str
            choices:
              - vtag-stack
              - mpls-label-stack
              - dscp
              - source-ip
              - destination-ip
              - l4-source-port
              - l4-destination-port
              - ip-protocol
              - base-etype
              - any
              - ip-fragment
              - l4-application
              - tcp-flags
              - source-mac
              - destination-mac
              - local-termination
              - icmp
              - ip-version
              - internal-cos
            required: false
          logical_not:
            description: Opposite of what is specified in the filter-parameters. If
              the filter-parameter specifies a tpid as tpid-8100, then anything other
              than tpid-8100 is considered an acceptable packet.
            type: bool
            required: false
          untagged_exclude_priority_tagged:
            description: Untagged exclude priority tagged
            type: bool
          vtags:
            description: List of VLAN tags
            type: list
            elements: dict
            suboptions:
              tag:
                description: 1 represents outer most tag, 2 next outer most, etc
                type: int
                required: true
              vlan_id:
                description: A specific value of VLAN Tag VLAN-ID
                type: int
                required: true
  state:
    choices:
      - merged
      - overridden
      - deleted
    default: merged
    description:
      - The state the configuration should be left in
    type: str
"""
EXAMPLES = """
# Using merged

- name: Configure classifier
  ciena.saos10.saos10_classifiers:
    config:
      - name: untagged
        filter_entry:
          - filter_parameter: vtag-stack
            untagged_exclude_priority_tagged: false
      - name: foo-100
        filter_entry:
          - filter_parameter: vtag-stack
            vtags:
              - tag: 1
                vlan_id: 100
    state: merged


"""
RETURN = """
before:
  description: The configuration prior to the model invocation.
  returned: always
  type: dict
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
after:
  description: The resulting configuration model invocation.
  returned: when changed
  type: dict
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
xml:
  description: The set of xml commands pushed to the remote device.
  returned: always
  type: list
  sample: ['<system xmlns="http://openconfig.net/yang/system"><config><hostname>foo</hostname></config></system>']
"""


from ansible.module_utils.basic import AnsibleModule
from ansible_collections.ciena.saos10.plugins.module_utils.network.saos10.argspec.classifiers.classifiers import (
    ClassifiersArgs,
)
from ansible_collections.ciena.saos10.plugins.module_utils.network.saos10.config.classifiers.classifiers import (
    Classifiers,
)


def main():
    """
    Main entry point for module execution

    :returns: the result form module invocation
    """
    module = AnsibleModule(argument_spec=ClassifiersArgs.argument_spec, supports_check_mode=True)

    result = Classifiers(module).execute_module()
    module.exit_json(**result)


if __name__ == "__main__":
    main()
