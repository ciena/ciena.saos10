#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2025 Ciena
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################

"""
The module file for saos10_ptps
"""

from __future__ import absolute_import, division, print_function

__metaclass__ = type


DOCUMENTATION = """
---
module: saos10_ptps
short_description: Physical Termination Point (PTP) configuration and operational data.Manage the ptps ptp configuration of a Ciena saos10 device
description: "Physical Termination Point (PTP) configuration and operational data.\n List of PTP objects."
author: Ciena
options:
  config:
    description: List of PTP objects.
    type: list
    elements: dict
    suboptions:
      properties:
        description: All the configurable and operational data of this PTP instance.
        type: dict
        suboptions:
          forward_error_correction:
            description: Forward error correction.
            type: str
            required: false
            choices:
            - disabled
            - enabled
          parent_id:
            description: Reference to the name of the transceiver (XCVR) associated with the PTP. Read-only attribute.
            type: str
            required: false
          thresholds:
            description: Common container for PTP threshold configuration data.
            type: dict
            suboptions:
              pre_fec_sd_dbq:
                description: Pre-FEC Signal Degrade threshold value, expressed in dBQ notation.
                type: float
                required: false
              pre_fec_sf_dbq:
                description: Pre-FEC Signal Fail threshold value, expressed in dBQ notation.
                type: float
                required: false
          transmitter:
            description: PTP transmitter related config and operational data fields.
            type: dict
            suboptions:
              state:
                description: Transmitter state (enabled or disabled) of the PTP. PTP Admin State cannot be changed to enabled unless the transmitter
                  state is enabled.
                type: str
                required: false
                choices:
                - disabled
                - enabled
                - not-applicable
          xcvr_type:
            description: Transceiver type of the XCVR that's associated with this PTP. Type depends on what is physically plugged in. Read only
              attribute.
            type: str
            required: false
            choices:
            - not-available
            - unsupported
            - QSFPplus
            - QSFP28
            - WaveLogic 3 Extreme
            - WaveLogic Ai
            - Sgmii
            - CFP
            - SFP
            - SFPplus
            - XFP
            - SFPplus tdwdm
            - CFP2
            - CFP2-DCO
            - CFP2-ACO
            - CEP001-OC3
            - CEP002-OC3-OC12
            - CEP003-DS3-E3
            - GES101-OC3-STM1
            - TDM2GE-E1
            - TDM4GE-DS1
            - TSOP01-OC3-STM1
            - TSOP02-OC12-STM4
            - TSOP03-OC48-STM16
            - NATIVE-OC3-OC12
            - NATIVE-OC48
            - QSFP56
            - QSFPDD
            - SFP28
            - Fixed-Copper
            - SFPDD
            - QSFPDD-AOC
            - QSFPDD-DAC
            - QSFPDD-WaveLogic-5n
            - SFP56
      ptp_id:
        description: 'Unique, access identifier string of the PTP (e.g., ''1/1''). Key value for the PTP list. Read-only attribute. (Key for list:
          ptp)'
        type: str
        required: true
      state:
        description: State information of this PTP instance.
        type: dict
        suboptions:
          admin_state:
            description: Administrative state (enabled or disabled) of the PTP. Intended for future use.
            type: str
            required: false
            choices:
            - disabled
            - enabled
          spli_management:
            description: Whether or not Service Photonic Layer Interoperations management protocol is enabled on this PTP.
            type: str
            required: false
            choices:
            - disabled
            - enabled
    key: ptp-id
  state:
    description:
    - The state of the configuration
    type: str
    choices:
    - merged
    - deleted
    default: merged

"""
EXAMPLES = """
"""

RETURN = """
before:
  description: The configuration prior to the model invocation.
  returned: always
  type: dict
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
after:
  description: The resulting configuration model invocation.
  returned: when changed
  type: dict
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
xml:
  description: The set of xml commands pushed to the remote device.
  returned: always
  type: list
  sample: ['<system xmlns="http://openconfig.net/yang/system"><config><hostname>foo</hostname></config></system>']
"""

from ansible.module_utils.basic import AnsibleModule
from ansible_collections.ciena.saos10.plugins.module_utils.network.saos10.argspec.ptps.ptps import (
    PtpsArgs,
)
from ansible_collections.ciena.saos10.plugins.module_utils.network.saos10.config.ptps.ptps import (
    Ptps,
)


def main():
    """
    Main entry point for module execution

    :returns: the result form module invocation
    """
    module = AnsibleModule(argument_spec=PtpsArgs.argument_spec, supports_check_mode=True)

    result = Ptps(module).execute_module()
    module.exit_json(**result)


if __name__ == "__main__":
    main()
